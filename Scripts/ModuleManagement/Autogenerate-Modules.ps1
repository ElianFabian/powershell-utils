# Autogenerate-Modules.ps1



# From repository: https://github.com/ElianFabian/powershell-utils



# Generats the enums from the modules to create a file to add them and then import then with the using statement.
# We do this because in Powershell you can't export an enum.



function New-AutogenaratedModule($ModuleName, $DataTypeRegex, $DataTypeName)
{
    $filesToReadTheirPossibleDataTypes = Get-ChildItem -Path ..\..\Modules\* -Recurse -Exclude "$ModuleName.psm1"

    $thisFileName = [System.IO.Path]::GetFileName($PSCommandPath)

    $autogeneratedFileContent = [System.Text.StringBuilder]::new("# $ModuleName.psm1`n`n`n# This file was generated by $thisFileName`n`n`n")
    $autogeneratedFileContent.Append("# This file will be import in $PROFILE with a 'using' statement to use its $DataTypeName set`n`n`n")

    foreach ($file in $filesToReadTheirPossibleDataTypes)
    {
        $content = Get-Content $file -Raw

        $dataTypes = (Select-String -InputObject $content -Pattern $DataTypeRegex -AllMatches).Matches

        if ($dataTypes.Count -eq 0) { continue }

        $autogeneratedFileContent.Append("#region From: $($file.Name)`n`n")

        foreach($dataType in $dataTypes)
        {
            $autogeneratedFileContent.Append($dataType).Append("`n`n")
        }

        $autogeneratedFileContent.Append("#endregion`n`n`n")
    }

    New-Item -Path "../../Modules/AutogeneratedModules/$ModuleName/$ModuleName.psm1" -Value $autogeneratedFileContent.ToString() -ItemType File -Force 
}



New-AutogenaratedModule -ModuleName "EnumModule" -DataTypeName "enum" -DataTypeRegex "enum \w+\s*\n?{[\S\s]*?}"
