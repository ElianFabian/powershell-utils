# Autogenerate-Modules.ps1



# From repository: https://github.com/ElianFabian/powershell-utils



# Generates the enums from the modules to create a file to add them and then import then with the using statement.
# We do this because in Powershell you can't export an enum.


$AUTOGENERATED_FOLDER_NAME = "AutogeneratedModules"


function New-AutogenaratedModule($ModuleName, $DataTypeRegex, $DataTypeName)
{
    $lineSeparator = "`n`n`n" 

    $initialAutogeneratedFileText = @(
        "# $ModuleName.psm1",
        "# This file was generated by '$PSCommandPath'",
        "# This file must be imported in '$PROFILE' with a 'using' statement to use its $DataTypeName set",
        "# To add it as a 'using' statement you have to execute 'Setup.ps1' or 'Autogenerate-Modules.ps1'",''
    ) -join $lineSeparator

    $autogeneratedFileSB = [System.Text.StringBuilder]::new($initialAutogeneratedFileText)

    $filesToReadTheirPossibleDataTypes = Get-ChildItem -Path ..\..\Modules\* -File -Recurse | Where-Object {

        $_.DirectoryName -notmatch $AUTOGENERATED_FOLDER_NAME
    }

    foreach ($moduleFile in $filesToReadTheirPossibleDataTypes)
    {
        $content = Get-Content $moduleFile -Raw

        $dataTypes = (Select-String -InputObject $content -Pattern $DataTypeRegex -AllMatches).Matches

        if ($dataTypes.Count -eq 0) { continue }

        $autogeneratedFileSB.Append("#region From: $($moduleFile.Name)").Append("`n`n") > $null

        foreach($dataType in $dataTypes)
        {
            $autogeneratedFileSB.Append($dataType).Append("`n`n") > $null
        }

        $autogeneratedFileSB.Append("#endregion$lineSeparator") > $null
    }

    New-Item -Path "../../Modules/$AUTOGENERATED_FOLDER_NAME/$ModuleName/$ModuleName.psm1" -Value $autogeneratedFileSB.ToString() -ItemType File -Force
}


New-AutogenaratedModule -ModuleName "AutogeneratedEnumModule" -DataTypeName "enum" -DataTypeRegex "enum \w+\s*\n?{[\S\s]*?}"
